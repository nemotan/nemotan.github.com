---
layout: post
title: java设计模式-观察者模式
categories:
- 设计模式
tags: 
- 设计模式
---
[toc]

# java设计模式-观察者模式
## 基本概念

观察者模式是对象的行为模式，又叫**发布-订阅(Publish/Subscribe)模式**、**模型-视图(Model/View)模式**、源-监听器(Source/Listener)模式或从属者(Dependents)模式。

观察者模式定义了`一种一对多`的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态上发生变化时，会通知所有观察者对象，使它们能够自动更新自己。

## 类图
观察者模式所涉及的角色有：
1、**抽象主(Subject)角色：**抽象主题角色把所有对观察者对象的引用保存在一个聚集（比如ArrayList对象）里，每个主题都可以有任何数量的观察者。抽象主题提供一个接口，可以增加和删除观察者对象，抽象主题角色又叫做抽象被观察者(Observable)角色。

2、**具体主题(ConcreteSubject)角色：**将有关状态存入具体观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色又叫做具体被观察者(Concrete Observable)角色。

3、**抽象观察者(Observer)角色：**为所有的具体观察者定义一个接口，在得到主题的通知时更新自己，这个接口叫做更新接口。

4、**具体观察者(ConcreteObserver)角色：**存储与主题的状态自恰的状态。具体观察者角色实现抽象观察者角色所要求的更新接口，以便使本身的状态与主题的状态 像协调。如果需要，具体观察者角色可以保持一个指向具体主题对象的引用。

![Paste_Image.png](http://upload-images.jianshu.io/upload_images/1182401-b52898e2423abdbd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)

## 实例

**Subject抽象类**

{% highlight java %}
package com.nemo.design.observer;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by nemo on 15/11/15.
 */
public abstract class Subject {
    List<Observer> observers = new ArrayList<Observer>();

    public void addObserver(Observer observer){
        observers.add(observer);
    }

    public void removeObserver(Observer observer){
        observers.remove(observer);
    }

    public void notifyObserver(){
        for(Observer observer : observers){
            observer.doWork();
        }
    }

    public abstract  void change(String newState);
}
{% endhighlight %}

**ConcreteSubjec类**

{% highlight java %}
package com.nemo.design.observer;

import java.util.ArrayList;
import java.util.List;

/**
 * Created by nemo on 15/11/15.
 */
public abstract class Subject {
    List<Observer> observers = new ArrayList<Observer>();

    public void addObserver(Observer observer){
        observers.add(observer);
    }

    public void removeObserver(Observer observer){
        observers.remove(observer);
    }

    public void notifyObserver(){
        for(Observer observer : observers){
            observer.doWork();
        }
    }

    public abstract  void change(String newState);
}
{% endhighlight %}

**Observer接口**

{% highlight java %}
package com.nemo.design.observer;

/**
 * Created by nemo on 15/11/15.
 */
public interface Observer {
    public void doWork();
}

{% endhighlight %}

**ConcreteObserver**

{% highlight java %}
package com.nemo.design.observer;

/**
 * Created by nemo on 15/11/15.
 */
public class ConcreteObserver implements Observer {
    String name;

    public ConcreteObserver(String name) {
        this.name = name;
    }

    public void doWork() {
        System.out.println("观察者" + this.name + "发现了变化");
    }
}

{% endhighlight %}
